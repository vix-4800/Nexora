import re
import sys
import time

from agent.status import console, status_manager

from agent.env import get_model, get_server
from agent.nira_agent import NiraAgent

try:
    from agent.voice_recognizer import transcribe_whisper
    from agent.voice_synthesizer import VoiceSynthesizer

    voice_modules_available = True
except Exception:
    transcribe_whisper = None
    VoiceSynthesizer = None
    voice_modules_available = False

voice_synthesizer = None


def prepare_response(text: str) -> str:
    response = re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL)
    return response.strip()


def typewriter(text: str, delay=0.015, prefix="") -> None:
    if prefix:
        console.print(f"[bold magenta]{prefix}[/]", end="")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(delay)
    print("\n")


def main() -> None:
    model = get_model()
    server = get_server()

    nira = NiraAgent(model_name=model, base_url=server)

    use_voice = "--voice" in sys.argv
    speak = "--speak" in sys.argv

    if (use_voice or speak) and not voice_modules_available:
        console.print(
            "[yellow]Voice features requested but optional dependencies are not installed.[/]"
        )
        if use_voice:
            console.print("[yellow]–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.[/]")
        if speak:
            console.print("[yellow]–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.[/]")
        use_voice = False
        speak = False

    if speak:
        global voice_synthesizer
        voice_synthesizer = VoiceSynthesizer()

    console.print(
        "[bold magenta]üëæ Nira:[/] –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤–∞ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–ø–∏—à–∏ /exit"
    )
    console.print(f"[dim]–Ø –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å: {model}[/]")
    console.rule("[bold blue]Nira Chat[/]")

    try:
        while True:
            if use_voice:
                user_input = transcribe_whisper()
                if not user_input:
                    console.print(
                        "[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑![/]"
                    )
                    continue
                console.print(f"[green]–¢—ã (–≥–æ–ª–æ—Å):[/] {user_input}")
            else:
                user_input = console.input("[green]–¢—ã:[/] ")

            if user_input.strip() in ["/exit", "–≤—ã—Ö–æ–¥", "exit"]:
                console.print("[bold magenta]üëæ Nira:[/] –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
                break

            with status_manager.status("–î—É–º–∞—é..."):
                response = nira.ask(user_input)
                response = prepare_response(response)

            typewriter(response, prefix="üëæ Nira: ")
            if speak:
                voice_synthesizer.speak(response)
    except EOFError:
        console.print("\n[bold magenta]üëæ Nira:[/] –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
    except KeyboardInterrupt:
        console.print("\n[bold magenta]üëæ Nira:[/] –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
    except Exception as e:
        console.print(f"\n[bold red]üëæ Nira:[/] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
